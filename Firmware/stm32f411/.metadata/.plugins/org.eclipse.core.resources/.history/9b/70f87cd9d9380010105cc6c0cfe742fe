/**
 * @file ssd1306.h
 * @brief SSD1306 OLED Display Driver Library for STM32 Microcontrollers
 * @details This library provides a comprehensive interface for controlling SSD1306-based
 *          OLED displays using STM32 microcontrollers via I2C communication.
 *
 * @author Original: Olivier Van den Eede (4ilo) © 2016
 * @author SPI Support & Refactoring: Aleksander Alekseev (afiskon) 2018
 * @author LVGL Integration & Modifications: Adrián Silva Palafox 2025
 *
 * @version 2.0
 * @date 2025
 *
 * @license MIT License: https://opensource.org/licenses/MIT
 * @repository https://github.com/afiskon/stm32-ssd1306
 *
 * @note Some refactoring was done to achieve working integration with LVGL and SPI support
 *       was deleted due to simplification purposes.
 */

#ifndef __SSD1306_H__
#define __SSD1306_H__

#include <stddef.h>
#include <stdint.h>
#include <_ansi.h>

_BEGIN_STD_C

// Choose a microcontroller family
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_gpio.h"

/* ========================================================================== */
/*                             DISPLAY OFFSET CONFIGURATION                  */
/* ========================================================================== */

#ifdef SSD1306_X_OFFSET
#define SSD1306_X_OFFSET_LOWER (SSD1306_X_OFFSET & 0x0F)        ///< Lower nibble of X offset
#define SSD1306_X_OFFSET_UPPER ((SSD1306_X_OFFSET >> 4) & 0x07) ///< Upper nibble of X offset
#else
#define SSD1306_X_OFFSET_LOWER 0  ///< Default lower X offset
#define SSD1306_X_OFFSET_UPPER 0  ///< Default upper X offset
#endif

/* ========================================================================== */
/*                             I2C CONFIGURATION                             */
/* ========================================================================== */

/**
 * @brief Default I2C port handle
 * @note Override in ssd1306_conf.h if using different I2C peripheral
 */
#ifndef SSD1306_I2C_PORT
#define SSD1306_I2C_PORT        hi2c1
#endif

/**
 * @brief SSD1306 I2C slave address (8-bit format with write bit)
 * @details Common addresses:
 *          - 0x78 (0x3C << 1) - Most common
 *          - 0x7A (0x3D << 1) - Alternative address
 */
#ifndef SSD1306_I2C_ADDR
#define SSD1306_I2C_ADDR        (0x78)
#endif

extern I2C_HandleTypeDef SSD1306_I2C_PORT;

/* ========================================================================== */
/*                             DISPLAY DIMENSIONS                            */
/* ========================================================================== */

/**
 * @brief SSD1306 OLED display height in pixels
 * @details Supported values: 32, 64, 128
 * @note Override in ssd1306_conf.h for different display sizes
 */
#ifndef SSD1306_HEIGHT
#define SSD1306_HEIGHT          64
#endif

/**
 * @brief SSD1306 OLED display width in pixels
 * @details Typically 128 pixels for most SSD1306 displays
 * @note Override in ssd1306_conf.h for different display sizes
 */
#ifndef SSD1306_WIDTH
#define SSD1306_WIDTH           128
#endif

/**
 * @brief Screen buffer size in bytes
 * @details Calculated as (WIDTH × HEIGHT) ÷ 8 since each byte represents 8 vertical pixels
 * @note For 128x64 display: 1024 bytes
 */
#ifndef SSD1306_BUFFER_SIZE
#define SSD1306_BUFFER_SIZE   SSD1306_WIDTH * SSD1306_HEIGHT / 8
#endif

/* ========================================================================== */
/*                             DATA TYPES & ENUMERATIONS                     */
/* ========================================================================== */

/**
 * @brief Pixel color enumeration
 * @details SSD1306 is a monochrome display with two possible pixel states
 */
typedef enum {
    Black = 0x00, ///< Black color (pixel off) - no light emission
    White = 0x01  ///< White color (pixel on) - light emission, actual color depends on OLED type
} SSD1306_COLOR;

/**
 * @brief Library error codes
 * @details Used for function return values to indicate operation status
 */
typedef enum {
    SSD1306_OK = 0x00,  ///< Operation completed successfully
    SSD1306_ERR = 0x01  ///< Generic error occurred during operation
} SSD1306_Error_t;

/**
 * @brief Display state structure
 * @details Maintains current display status and cursor position
 * @note For internal library use - do not modify directly
 */
typedef struct {
    uint16_t CurrentX;     ///< Current cursor X position for text operations
    uint16_t CurrentY;     ///< Current cursor Y position for text operations
    uint8_t Initialized;   ///< Display initialization status flag
    uint8_t DisplayOn;     ///< Current display power state (0=OFF, 1=ON)
} SSD1306_t;

/**
 * @brief Vertex point structure for polyline operations
 * @details Used to define points in connected line drawings
 */
typedef struct {
    uint8_t x; ///< X coordinate of the vertex
    uint8_t y; ///< Y coordinate of the vertex
} SSD1306_VERTEX;

/**
 * @brief Font structure definition
 * @details Defines font characteristics and data for text rendering
 */
typedef struct {
    const uint8_t width;                ///< Font width in pixels (for monospaced fonts)
    const uint8_t height;               ///< Font height in pixels
    const uint16_t *const data;         ///< Pointer to font bitmap data array
    const uint8_t *const char_width;    ///< Proportional character width array (NULL for monospaced)
} SSD1306_Font_t;

/* ========================================================================== */
/*                          CORE INITIALIZATION FUNCTIONS                    */
/* ========================================================================== */

/**
 * @brief Initialize the SSD1306 OLED display
 * @details Performs complete display initialization sequence:
 *          - Hardware reset (if applicable)
 *          - Display configuration setup
 *          - Memory addressing mode configuration
 *          - Screen clearing and buffer initialization
 *          - Cursor position reset
 * @note Must be called before any other display operations
 * @warning Requires I2C peripheral to be properly initialized before calling
 */
void ssd1306_Init(void);

/**
 * @brief Fill entire display buffer with specified color
 * @param color Fill color (Black or White)
 * @details Fills the entire screen buffer with the specified color.
 *          Call ssd1306_UpdateScreen() to transfer changes to physical display.
 * @note This operation only affects the buffer, not the physical display
 */
void ssd1306_Fill(SSD1306_COLOR color);

/**
 * @brief Transfer screen buffer contents to physical display
 * @details Sends the complete screen buffer to the display via I2C communication.
 *          This function must be called after drawing operations to make changes visible.
 * @note Blocking operation - will wait for I2C transfer completion
 * @warning May take several milliseconds to complete depending on I2C clock speed
 */
void ssd1306_UpdateScreen(void);

/* ========================================================================== */
/*                          PIXEL MANIPULATION FUNCTIONS                     */
/* ========================================================================== */

/**
 * @brief Draw a single pixel at specified coordinates
 * @param x X coordinate (0 to SSD1306_WIDTH-1)
 * @param y Y coordinate (0 to SSD1306_HEIGHT-1)
 * @param color Pixel color (Black or White)
 * @details Sets or clears a single pixel in the display buffer.
 *          Coordinates outside display bounds are ignored.
 * @note Changes are not visible until ssd1306_UpdateScreen() is called
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color);

/* ========================================================================== */
/*                             TEXT RENDERING FUNCTIONS                      */
/* ========================================================================== */

/**
 * @brief Set cursor position for text operations
 * @param x X coordinate for next character (0 to SSD1306_WIDTH-1)
 * @param y Y coordinate for next character (0 to SSD1306_HEIGHT-1)
 * @details Sets the starting position for subsequent text rendering operations.
 *          Text will be drawn from this position moving rightward.
 */
void ssd1306_SetCursor(uint8_t x, uint8_t y);

/**
 * @brief Write a single character to the display buffer
 * @param ch Character to write (ASCII printable characters 32-126)
 * @param Font Font structure defining character appearance
 * @param color Text color (Black or White)
 * @return char The character that was written, or 0 if operation failed
 * @details Renders a single character at the current cursor position and advances
 *          the cursor for the next character. Supports both monospaced and
 *          proportional fonts.
 * @note Fails if character doesn't fit within display bounds
 * @note Cursor automatically advances after successful character write
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color);

/**
 * @brief Write a null-terminated string to the display buffer
 * @param str Pointer to null-terminated string
 * @param Font Font structure defining text appearance
 * @param color Text color (Black or White)
 * @return char Last character processed (0 if all successful, failed character otherwise)
 * @details Renders a complete string starting at current cursor position.
 *          Stops at first character that cannot fit within display bounds.
 * @note String must be null-terminated
 * @note Cursor position advances with each character
 */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color);

/* ========================================================================== */
/*                             LINE DRAWING FUNCTIONS                        */
/* ========================================================================== */

/**
 * @brief Draw a straight line between two points
 * @param x1 Starting point X coordinate
 * @param y1 Starting point Y coordinate
 * @param x2 Ending point X coordinate
 * @param y2 Ending point Y coordinate
 * @param color Line color (Black or White)
 * @details Uses Bresenham's line algorithm for efficient, antialiasing-free line drawing.
 *          Handles lines in any direction (horizontal, vertical, diagonal).
 * @note Coordinates outside display bounds are clipped
 */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color);

/**
 * @brief Draw connected line segments (polyline)
 * @param par_vertex Array of vertex points defining the polyline
 * @param par_size Number of vertices in the array
 * @param color Line color (Black or White)
 * @details Draws connected line segments between consecutive vertices.
 *          Useful for drawing complex shapes, graphs, or polygons.
 * @note Requires at least 2 vertices to draw anything
 * @note Does not automatically close the shape (connect last to first point)
 */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color);

/* ========================================================================== */
/*                             ARC DRAWING FUNCTIONS                         */
/* ========================================================================== */

/**
 * @brief Draw an arc segment
 * @param x Center point X coordinate
 * @param y Center point Y coordinate
 * @param radius Arc radius in pixels
 * @param start_angle Starting angle in degrees (0° = right, increases clockwise)
 * @param sweep Arc sweep angle in degrees
 * @param color Arc color (Black or White)
 * @details Draws a circular arc segment using line approximation.
 *          Angle reference: 0° points right, 90° points down, 180° points left, 270° points up.
 * @note Uses 36 segments per full circle for smooth appearance
 * @note Angles are automatically normalized to 0-360° range
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color);

/**
 * @brief Draw an arc segment with radius lines
 * @param x Center point X coordinate
 * @param y Center point Y coordinate
 * @param radius Arc radius in pixels
 * @param start_angle Starting angle in degrees
 * @param sweep Arc sweep angle in degrees
 * @param color Drawing color (Black or White)
 * @details Same as ssd1306_DrawArc() but additionally draws straight lines
 *          from the center point to both endpoints of the arc.
 *          Useful for creating pie chart segments or angle indicators.
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color);

/* ========================================================================== */
/*                            CIRCLE DRAWING FUNCTIONS                       */
/* ========================================================================== */

/**
 * @brief Draw a circle outline
 * @param par_x Center point X coordinate
 * @param par_y Center point Y coordinate
 * @param par_r Circle radius in pixels
 * @param color Circle outline color (Black or White)
 * @details Uses Bresenham's circle algorithm for efficient circle drawing.
 *          Only draws the circumference, not a filled circle.
 * @note Circles extending beyond display bounds are automatically clipped
 */
void ssd1306_DrawCircle(uint8_t par_x, uint8_t par_y, uint8_t par_r, SSD1306_COLOR color);

/**
 * @brief Draw a filled circle
 * @param par_x Center point X coordinate
 * @param par_y Center point Y coordinate
 * @param par_r Circle radius in pixels
 * @param par_color Fill color (Black or White)
 * @details Draws a completely filled circle using modified Bresenham's algorithm.
 *          More computationally intensive than outline circle.
 * @note Circles extending beyond display bounds are automatically clipped
 */
void ssd1306_FillCircle(uint8_t par_x, uint8_t par_y, uint8_t par_r, SSD1306_COLOR par_color);

/* ========================================================================== */
/*                          RECTANGLE DRAWING FUNCTIONS                      */
/* ========================================================================== */

/**
 * @brief Draw a rectangle outline
 * @param x1 Top-left corner X coordinate
 * @param y1 Top-left corner Y coordinate
 * @param x2 Bottom-right corner X coordinate
 * @param y2 Bottom-right corner Y coordinate
 * @param color Rectangle outline color (Black or White)
 * @details Draws only the perimeter of the rectangle, not filled.
 *          Coordinates can be specified in any order (function handles swapping).
 */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color);

/**
 * @brief Draw a filled rectangle
 * @param x1 Top-left corner X coordinate
 * @param y1 Top-left corner Y coordinate
 * @param x2 Bottom-right corner X coordinate
 * @param y2 Bottom-right corner Y coordinate
 * @param color Fill color (Black or White)
 * @details Draws a completely filled rectangle.
 *          Coordinates can be specified in any order (function handles swapping).
 *          Automatically clips to display boundaries.
 */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color);

/**
 * @brief Invert pixel colors within a rectangular region
 * @param x1 Top-left corner X coordinate
 * @param y1 Top-left corner Y coordinate
 * @param x2 Bottom-right corner X coordinate
 * @param y2 Bottom-right corner Y coordinate
 * @return SSD1306_Error_t Operation result
 * @retval SSD1306_OK Operation completed successfully
 * @retval SSD1306_ERR Invalid coordinates or parameters
 * @details Flips all pixels within the specified rectangle (Black↔White).
 *          Useful for creating selection highlights or visual emphasis.
 * @note Rectangle coordinates must be within display bounds
 * @note x1 must be ≤ x2 and y1 must be ≤ y2
 */
SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2);

/* ========================================================================== */
/*                             BITMAP FUNCTIONS                              */
/* ========================================================================== */

/**
 * @brief Draw a monochrome bitmap image
 * @param x Top-left corner X coordinate for bitmap placement
 * @param y Top-left corner Y coordinate for bitmap placement
 * @param bitmap Pointer to bitmap data array
 * @param w Bitmap width in pixels
 * @param h Bitmap height in pixels
 * @param color Color for set pixels (Black or White)
 * @details Draws a monochrome bitmap where each bit represents one pixel.
 *          Bitmap data should be organized as horizontal scanlines with
 *          the most significant bit representing the leftmost pixel.
 *          Only pixels with value '1' in bitmap are drawn with specified color.
 * @note Bitmap extending beyond display bounds is automatically clipped
 * @note Bitmap data format: MSB = leftmost pixel, padded to byte boundaries
 */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color);

/* ========================================================================== */
/*                           DISPLAY CONTROL FUNCTIONS                       */
/* ========================================================================== */

/**
 * @brief Set display contrast/brightness level
 * @param value Contrast value (0x00 to 0xFF)
 * @details Adjusts the display brightness/contrast. Higher values result in
 *          brighter display output. The default reset value is 0x7F.
 * @note Changes take effect immediately
 * @note Optimal values may vary depending on display manufacturer
 */
void ssd1306_SetContrast(const uint8_t value);

/**
 * @brief Control display power state
 * @param on Display power state (0 = OFF, non-zero = ON)
 * @details Turns the physical display on or off. When off, the display
 *          consumes minimal power but retains buffer contents.
 * @note Display buffer contents are preserved during power off
 * @note Changes take effect immediately
 */
void ssd1306_SetDisplayOn(const uint8_t on);

/**
 * @brief Get current display power state
 * @return uint8_t Current display state
 * @retval 0 Display is OFF
 * @retval 1 Display is ON
 * @details Returns the current power state of the display as set by
 *          ssd1306_SetDisplayOn() or during initialization.
 */
uint8_t ssd1306_GetDisplayOn(void);

/* ========================================================================== */
/*                          LOW-LEVEL INTERFACE FUNCTIONS                    */
/* ========================================================================== */

/**
 * @brief Send a command byte to the display controller
 * @param byte Command byte to send
 * @details Sends a single command byte to the SSD1306 controller via I2C.
 *          Used internally by higher-level functions.
 * @note For advanced users only - incorrect commands may damage display
 * @warning Blocking operation with HAL_MAX_DELAY timeout
 */
void ssd1306_WriteCommand(uint8_t byte);

/**
 * @brief Send data bytes to the display controller
 * @param buffer Pointer to data buffer
 * @param buff_size Number of bytes to send
 * @details Sends multiple data bytes to the SSD1306 controller via I2C.
 *          Used internally for screen buffer transfers.
 * @note For advanced users only
 * @warning Blocking operation with HAL_MAX_DELAY timeout
 */
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size);

/**
 * @brief Fill screen buffer with external data
 * @param buf Pointer to source buffer containing display data
 * @param len Length of source buffer in bytes
 * @return SSD1306_Error_t Operation result
 * @retval SSD1306_OK Buffer copied successfully
 * @retval SSD1306_ERR Buffer too large or invalid parameters
 * @details Copies external buffer data directly into the display buffer.
 *          Useful for displaying pre-rendered graphics or animations.
 * @note Buffer size must not exceed SSD1306_BUFFER_SIZE
 * @note Data format must match SSD1306 buffer organization
 * @warning No bounds checking on buffer content validity
 */
SSD1306_Error_t ssd1306_FillBuffer(uint8_t* buf, uint32_t len);

_END_STD_C

#endif // __SSD1306_H__
