/**
 * @file ssd1306.c
 * @brief SSD1306 OLED Display Driver
 * @details This driver provides functions to interact with the SSD1306 OLED display over I2C.
 * It includes basic drawing primitives, text rendering, and display control.
 * @note This implementation is designed for the STM32 HAL library.
 */

#include "ssd1306.h"
#include <math.h>
#include <stdlib.h>
#include <string.h>

/**
 * @brief Write a command byte to the SSD1306 display
 * @param byte Command byte to send
 * @note Uses STM32 HAL I2C function for communication
 */
void ssd1306_WriteCommand(uint8_t byte) {
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}

/**
 * @brief Write data to the SSD1306 display
 * @param buffer Pointer to data buffer
 * @param buff_size Size of data buffer in bytes
 */
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

static uint8_t SSD1306_Buffer[SSD1306_BUFFER_SIZE]; ///< Display buffer (1bpp packed format)
static SSD1306_t SSD1306; ///< Display control structure

/**
 * @brief Fill internal display buffer with external data
 * @param buf Source buffer containing display data
 * @param len Length of data to copy (must be <= SSD1306_BUFFER_SIZE)
 * @return SSD1306_Error_t SSD1306_OK on success, SSD1306_ERR on invalid length
 */
SSD1306_Error_t ssd1306_FillBuffer(uint8_t* buf, uint32_t len) {
    SSD1306_Error_t ret = SSD1306_ERR;
    if (len <= SSD1306_BUFFER_SIZE) {
        memcpy(SSD1306_Buffer, buf, len);
        ret = SSD1306_OK;
    }
    return ret;
}

/**
 * @brief Initialize SSD1306 display
 * @details Configures display parameters, clears screen, and sets initial cursor position
 */
void ssd1306_Init(void) {
    // [Implementation details omitted for brevity]
}

/**
 * @brief Fill entire display with specified color
 * @param color Color to fill (Black or White)
 */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
}

/**
 * @brief Update physical display with buffer contents
 * @details Transfers entire display buffer to SSD1306 RAM through I2C
 */
void ssd1306_UpdateScreen(void) {
    // [Implementation details omitted for brevity]
}

/**
 * @brief Draw single pixel in display buffer
 * @param x X coordinate (0-127)
 * @param y Y coordinate (0-63/31/127 depending on display)
 * @param color Pixel color (Black or White)
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    // [Implementation details omitted for brevity]
}

/**
 * @brief Write character to display buffer
 * @param ch Character to write (ASCII 32-126)
 * @param Font Font structure to use for rendering
 * @param color Text color (Black or White)
 * @return char Written character or 0 on error
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
    // [Implementation details omitted for brevity]
}

/**
 * @brief Write null-terminated string to display buffer
 * @param str String to display
 * @param Font Font structure to use
 * @param color Text color
 * @return char Last successfully written character or 0
 */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
    // [Implementation details omitted for brevity]
}

/* Additional functions follow with similar documentation patterns */

/**
 * @brief Set contrast level
 * @param value Contrast value (0-255)
 */
void ssd1306_SetContrast(const uint8_t value) {
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
    ssd1306_WriteCommand(value);
}

/**
 * @brief Control display power state
 * @param on 1 to turn display on, 0 for standby
 */
void ssd1306_SetDisplayOn(const uint8_t on) {
    // [Implementation details omitted for brevity]
}

/**
 * @brief Get current display power state
 * @return uint8_t 1 if display is on, 0 otherwise
 */
uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}
